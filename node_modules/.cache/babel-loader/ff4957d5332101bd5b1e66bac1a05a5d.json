{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Romas\\\\astro\\\\src\\\\animations\\\\animation.jsx\";\nimport React, { useState } from \"react\";\nimport { Spring, animated } from \"react-spring/renderprops\";\nimport paths from \"./paths\";\nimport { interpolate } from \"flubber\";\n\nconst Animation = () => {\n  const [pinger, ping] = useState(1);\n  const interpolator = interpolate(paths[\"discord\"], paths[`discord${pinger < 5 ? pinger >= 3 ? \"-right\" : \"-left\" : \"\"}`]);\n  return React.createElement(\"svg\", {\n    width: \"440\",\n    height: \"300\",\n    viewBox: \"0 0 440 320\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(Spring, {\n    config: {\n      delay: 1000,\n      friction: 20\n    },\n    reset: true,\n    native: true,\n    from: {\n      t: pinger % 2 === 0 ? 1 : 0\n    },\n    to: {\n      t: pinger % 2 === 0 ? 0 : 1\n    },\n    onRest: () => ping(pinger % 6 + 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, ({\n    t\n  }) => React.createElement(animated.path, {\n    d: t.interpolate(interpolator),\n    fill: \"WHITE\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  })));\n};\n\nexport default Animation;","map":{"version":3,"sources":["C:/Users/Romas/astro/src/animations/animation.jsx"],"names":["React","useState","Spring","animated","paths","interpolate","Animation","pinger","ping","interpolator","delay","friction","t"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,0BAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,WAAT,QAA4B,SAA5B;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAM,CAACC,MAAD,EAASC,IAAT,IAAiBP,QAAQ,CAAC,CAAD,CAA/B;AACA,QAAMQ,YAAY,GAAGJ,WAAW,CAC9BD,KAAK,CAAC,SAAD,CADyB,EAE9BA,KAAK,CAAE,UAASG,MAAM,GAAG,CAAT,GAAcA,MAAM,IAAI,CAAV,GAAc,QAAd,GAAyB,OAAvC,GAAkD,EAAG,EAAhE,CAFyB,CAAhC;AAIA,SACE;AAAK,IAAA,KAAK,EAAC,KAAX;AAAiB,IAAA,MAAM,EAAC,KAAxB;AAA8B,IAAA,OAAO,EAAC,aAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AACE,IAAA,MAAM,EAAE;AAAEG,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,QAAQ,EAAE;AAAzB,KADV;AAEE,IAAA,KAAK,MAFP;AAGE,IAAA,MAAM,MAHR;AAIE,IAAA,IAAI,EAAE;AACJC,MAAAA,CAAC,EAAEL,MAAM,GAAG,CAAT,KAAe,CAAf,GAAmB,CAAnB,GAAuB;AADtB,KAJR;AAOE,IAAA,EAAE,EAAE;AAAEK,MAAAA,CAAC,EAAEL,MAAM,GAAG,CAAT,KAAe,CAAf,GAAmB,CAAnB,GAAuB;AAA5B,KAPN;AAQE,IAAA,MAAM,EAAE,MAAMC,IAAI,CAAED,MAAM,GAAG,CAAV,GAAe,CAAhB,CARpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUG,CAAC;AAAEK,IAAAA;AAAF,GAAD,KACC,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,CAAC,EAAEA,CAAC,CAACP,WAAF,CAAcI,YAAd,CAAlB;AAA+C,IAAA,IAAI,EAAE,OAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,CADF,CADF;AAkBD,CAxBD;;AA0BA,eAAeH,SAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Spring, animated } from \"react-spring/renderprops\";\r\nimport paths from \"./paths\";\r\nimport { interpolate } from \"flubber\";\r\n\r\nconst Animation = () => {\r\n  const [pinger, ping] = useState(1);\r\n  const interpolator = interpolate(\r\n    paths[\"discord\"],\r\n    paths[`discord${pinger < 5 ? (pinger >= 3 ? \"-right\" : \"-left\") : \"\"}`]\r\n  );\r\n  return (\r\n    <svg width=\"440\" height=\"300\" viewBox=\"0 0 440 320\">\r\n      <Spring\r\n        config={{ delay: 1000, friction: 20 }}\r\n        reset\r\n        native\r\n        from={{\r\n          t: pinger % 2 === 0 ? 1 : 0,\r\n        }}\r\n        to={{ t: pinger % 2 === 0 ? 0 : 1 }}\r\n        onRest={() => ping((pinger % 6) + 1)}\r\n      >\r\n        {({ t }) => (\r\n          <animated.path d={t.interpolate(interpolator)} fill={\"WHITE\"} />\r\n        )}\r\n      </Spring>\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default Animation;\r\n"]},"metadata":{},"sourceType":"module"}