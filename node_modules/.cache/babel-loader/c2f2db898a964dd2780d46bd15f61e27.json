{"ast":null,"code":"\"use strict\";\n\nconst RequestHandler = require(\"./eris/rest/RequestHandler\");\n/**\r\n * Make requests to discord's OAuth2 API\r\n * @extends requestHandler\r\n */\n\n\nclass OAuth extends RequestHandler {\n  /**\r\n   * \r\n   * @arg {Object} options All the options default to the same as the default Eris Client\r\n   * @arg {Number} [options.requestTimeout=15000] A number of milliseconds before requests are considered timed out\r\n   * @arg {Number} [options.latencyThreshold=30000] The average request latency at which the RequestHandler will start emitting latency errors\r\n   * @arg {Number} [options.ratelimiterOffset=0] A number of milliseconds to offset the ratelimit timing calculations by\r\n   */\n  constructor(options = {}) {\n    super({\n      requestTimeout: options.requestTimeout || 15000,\n      latencyThreshold: options.latencyThreshold || 30000,\n      ratelimiterOffset: options.ratelimiterOffset || 0\n    });\n    this.credentials = options.credentials;\n  }\n  /**\r\n   * Exchange the code returned by discord in the query for the user access token\r\n   * If specified, can also use the refresh_token to get a new valid token\r\n   * Read discord's oauth2 documentation for a full example (https://discordapp.com/developers/docs/topics/oauth2)\r\n   * @arg {Object} data The object containing the parameters for the request\r\n   * @arg {String} data.clientId Your application's client id\r\n   * @arg {String} data.clientSecret Your application's client secret\r\n   * @arg {String} data.grantType Either authorization_code or refresh_token\r\n   * @arg {String} data.code The code from the querystring\r\n   * @arg {String} data.redirectUri Whatever URL you registered when creating your application\r\n   * @arg {String} data.scope The scopes requested in your authorization url, space-delimited\r\n   * @returns {Promise<Object>}\r\n   */\n\n\n  tokenRequest(data = {}) {\n    const obj = {\n      client_id: data.clientId,\n      client_secret: data.clientSecret,\n      grant_type: data.grantType,\n      code: data.code,\n      redirect_uri: data.redirectUri,\n      scope: data.scope\n    };\n    let string = \"\";\n\n    for (const [key, value] of Object.entries(obj)) {\n      if (!value) throw new Error(`Missing ${key} property for tokenRequest`);else string += `&${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n    }\n\n    return this.request(\"POST\", \"/oauth2/token\", string.substring(1), {\n      contentType: \"application/x-www-form-urlencoded\"\n    });\n  }\n  /**\r\n   * Revoke the user access token\r\n   * @arg {String} access_token The user access token\r\n   * @arg {String} credentials Base64 encoding of the UTF-8 encoded credentials string\r\n   * @returns {Promise<String>}\r\n   */\n\n\n  revokeToken(access_token, credentials) {\n    if (!credentials && !this.credentials) throw new Error(\"Missing credentials for revokeToken method\");\n    return this.request(\"POST\", \"/oauth2/token/revoke\", `token=${access_token}`, {\n      auth: {\n        type: \"Basic\",\n        creds: credentials || this.credentials\n      },\n      contentType: \"application/x-www-form-urlencoded\"\n    });\n  }\n  /**\r\n   * Request basic user data\r\n   * Requires the `identify` scope\r\n   * @arg {String} access_token The user access token\r\n   * @returns {Promise<Object>}\r\n   */\n\n\n  getUser(access_token) {\n    return this.request(\"GET\", \"/users/@me\", undefined, {\n      auth: {\n        type: \"Bearer\",\n        creds: access_token\n      },\n      contentType: \"application/json\"\n    });\n  }\n  /**\r\n   * Request all the guilds the user is in\r\n   * Requires the `guilds` scope\r\n   * @arg {String} access_token The user access token\r\n   * @returns {Promise<Object[]>}\r\n   */\n\n\n  getUserGuilds(access_token) {\n    return this.request(\"GET\", \"/users/@me/guilds\", undefined, {\n      auth: {\n        type: \"Bearer\",\n        creds: access_token\n      },\n      contentType: \"application/json\"\n    });\n  }\n  /**\r\n   * Request a user's connections\r\n   * Requires the `connections` scope\r\n   * @arg {String} access_token The user access token\r\n   * @returns {Promise<Object[]>}\r\n   */\n\n\n  getUserConnections(access_token) {\n    return this.request(\"GET\", \"/users/@me/connections\", undefined, {\n      auth: {\n        type: \"Bearer\",\n        creds: access_token\n      },\n      contentType: \"application/json\"\n    });\n  }\n  /**\r\n   * Force a user to join a guild\r\n   * Requires the `guilds.join` scope\r\n   * @arg {Object} data\r\n   * @arg {String} data.guildId The ID of the guild to join\r\n   * @arg {String} data.userId The ID of the user to be added to the guild\r\n   * @arg {Boolean?} data.deaf Whether the user is deafened in voice channels\r\n   * @arg {Boolean?} data.mute Whether the user is muted in voice channels\r\n   * @arg {String?} data.nickname Value to set users nickname to\r\n   * @arg {String[]?} data.roles Array of role ids the member is assigned\r\n   * @arg {String} data.accessToken The user access token\r\n   * @arg {String} data.botToken The token of the bot used to authenticate\r\n   * @returns {Promise<Object | String>}\r\n   */\n\n\n  addMember(data) {\n    return this.request(\"PUT\", `/guilds/${data.guildId}/members/${data.userId}`, {\n      deaf: data.deaf,\n      mute: data.mute,\n      nick: data.nickname,\n      roles: data.roles,\n      access_token: data.accessToken\n    }, {\n      auth: {\n        type: \"Bot\",\n        creds: data.botToken\n      },\n      contentType: \"application/json\"\n    });\n  }\n\n}\n\nmodule.exports = OAuth;","map":{"version":3,"sources":["C:/Users/Romas/astro/node_modules/discord-oauth2/lib/oauth.js"],"names":["RequestHandler","require","OAuth","constructor","options","requestTimeout","latencyThreshold","ratelimiterOffset","credentials","tokenRequest","data","obj","client_id","clientId","client_secret","clientSecret","grant_type","grantType","code","redirect_uri","redirectUri","scope","string","key","value","Object","entries","Error","encodeURIComponent","request","substring","contentType","revokeToken","access_token","auth","type","creds","getUser","undefined","getUserGuilds","getUserConnections","addMember","guildId","userId","deaf","mute","nick","nickname","roles","accessToken","botToken","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nconst RequestHandler = require(\"./eris/rest/RequestHandler\");\r\n\r\n/**\r\n * Make requests to discord's OAuth2 API\r\n * @extends requestHandler\r\n */\r\nclass OAuth extends RequestHandler {\r\n    /**\r\n     * \r\n     * @arg {Object} options All the options default to the same as the default Eris Client\r\n     * @arg {Number} [options.requestTimeout=15000] A number of milliseconds before requests are considered timed out\r\n     * @arg {Number} [options.latencyThreshold=30000] The average request latency at which the RequestHandler will start emitting latency errors\r\n     * @arg {Number} [options.ratelimiterOffset=0] A number of milliseconds to offset the ratelimit timing calculations by\r\n     */\r\n    constructor(options = {}) {\r\n        super({\r\n            requestTimeout: options.requestTimeout || 15000,\r\n            latencyThreshold: options.latencyThreshold || 30000,\r\n            ratelimiterOffset: options.ratelimiterOffset ||  0\r\n        });\r\n\r\n        this.credentials = options.credentials;\r\n    }\r\n\r\n    /**\r\n     * Exchange the code returned by discord in the query for the user access token\r\n     * If specified, can also use the refresh_token to get a new valid token\r\n     * Read discord's oauth2 documentation for a full example (https://discordapp.com/developers/docs/topics/oauth2)\r\n     * @arg {Object} data The object containing the parameters for the request\r\n     * @arg {String} data.clientId Your application's client id\r\n     * @arg {String} data.clientSecret Your application's client secret\r\n     * @arg {String} data.grantType Either authorization_code or refresh_token\r\n     * @arg {String} data.code The code from the querystring\r\n     * @arg {String} data.redirectUri Whatever URL you registered when creating your application\r\n     * @arg {String} data.scope The scopes requested in your authorization url, space-delimited\r\n     * @returns {Promise<Object>}\r\n     */\r\n    tokenRequest(data = {}) {\r\n        const obj = {\r\n            client_id:      data.clientId,\r\n            client_secret:  data.clientSecret,\r\n            grant_type:     data.grantType,\r\n            code:           data.code,\r\n            redirect_uri:   data.redirectUri,\r\n            scope:          data.scope\r\n        };\r\n\r\n        let string = \"\";\r\n        for (const [key, value] of Object.entries(obj)) {\r\n            if (!value) throw new Error(`Missing ${key} property for tokenRequest`);\r\n            else string += `&${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\r\n        }\r\n\r\n        return this.request(\"POST\", \"/oauth2/token\", string.substring(1), {\r\n            contentType: \"application/x-www-form-urlencoded\"\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Revoke the user access token\r\n     * @arg {String} access_token The user access token\r\n     * @arg {String} credentials Base64 encoding of the UTF-8 encoded credentials string\r\n     * @returns {Promise<String>}\r\n     */\r\n    revokeToken(access_token, credentials) {\r\n        if (!credentials && !this.credentials) throw new Error(\"Missing credentials for revokeToken method\");\r\n        return this.request(\"POST\", \"/oauth2/token/revoke\", `token=${access_token}`, {\r\n            auth: {\r\n                type: \"Basic\",\r\n                creds: credentials || this.credentials\r\n            },\r\n            contentType: \"application/x-www-form-urlencoded\"\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Request basic user data\r\n     * Requires the `identify` scope\r\n     * @arg {String} access_token The user access token\r\n     * @returns {Promise<Object>}\r\n     */\r\n    getUser(access_token) {\r\n        return this.request(\"GET\", \"/users/@me\", undefined, {\r\n            auth: {\r\n                type: \"Bearer\",\r\n                creds: access_token\r\n            },\r\n            contentType: \"application/json\"\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Request all the guilds the user is in\r\n     * Requires the `guilds` scope\r\n     * @arg {String} access_token The user access token\r\n     * @returns {Promise<Object[]>}\r\n     */\r\n    getUserGuilds(access_token) {\r\n        return this.request(\"GET\", \"/users/@me/guilds\", undefined, {\r\n            auth: {\r\n                type: \"Bearer\",\r\n                creds: access_token\r\n            },\r\n            contentType: \"application/json\"\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Request a user's connections\r\n     * Requires the `connections` scope\r\n     * @arg {String} access_token The user access token\r\n     * @returns {Promise<Object[]>}\r\n     */\r\n    getUserConnections(access_token) {\r\n        return this.request(\"GET\", \"/users/@me/connections\", undefined, {\r\n            auth: {\r\n                type: \"Bearer\",\r\n                creds: access_token\r\n            },\r\n            contentType: \"application/json\"\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Force a user to join a guild\r\n     * Requires the `guilds.join` scope\r\n     * @arg {Object} data\r\n     * @arg {String} data.guildId The ID of the guild to join\r\n     * @arg {String} data.userId The ID of the user to be added to the guild\r\n     * @arg {Boolean?} data.deaf Whether the user is deafened in voice channels\r\n     * @arg {Boolean?} data.mute Whether the user is muted in voice channels\r\n     * @arg {String?} data.nickname Value to set users nickname to\r\n     * @arg {String[]?} data.roles Array of role ids the member is assigned\r\n     * @arg {String} data.accessToken The user access token\r\n     * @arg {String} data.botToken The token of the bot used to authenticate\r\n     * @returns {Promise<Object | String>}\r\n     */\r\n    addMember(data) {\r\n        return this.request(\"PUT\", `/guilds/${data.guildId}/members/${data.userId}`, {\r\n            deaf: data.deaf,\r\n            mute: data.mute,\r\n            nick: data.nickname,\r\n            roles: data.roles,\r\n            access_token: data.accessToken\r\n        }, {\r\n            auth: {\r\n                type: \"Bot\",\r\n                creds: data.botToken\r\n            },\r\n            contentType: \"application/json\"\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = OAuth;\r\n"]},"metadata":{},"sourceType":"script"}