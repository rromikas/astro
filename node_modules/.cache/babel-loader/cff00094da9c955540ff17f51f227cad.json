{"ast":null,"code":"/*\r\n    The MIT License (MIT)\r\n\r\n    Copyright (c) 2016-2018 abalabahaha\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy of\r\n    this software and associated documentation files (the \"Software\"), to deal in\r\n    the Software without restriction, including without limitation the rights to\r\n    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\n    the Software, and to permit persons to whom the Software is furnished to do so,\r\n    subject to the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included in all\r\n    copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\n    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\n    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\n    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\n// Modifications to work with discord's OAuth2 made by legendarylol#8215 (364571773947346955) on discord\n// On github: https://github.com/reboxer\n// Repository: https://github.com/reboxer/discord-oauth2\n// Disclaimer: I did not create the original \"RequestHandler\" for the Eris Discord library, i only did the modifications to work with OAuth2\n//             All credits go to abalabahaha (https://github.com/abalabahaha) and contributors to the Eris Discord library (https://github.com/abalabahaha/eris)\n\"use strict\";\n\nconst DiscordHTTPError = require(\"../errors/DiscordHTTPError\");\n\nconst DiscordRESTError = require(\"../errors/DiscordRESTError\");\n\nconst HTTPS = require(\"https\");\n\nconst SequentialBucket = require(\"../util/SequentialBucket\");\n\nconst EventEmitter = require(\"events\");\n/**\r\n* Handles API requests\r\n*/\n\n\nclass RequestHandler extends EventEmitter {\n  constructor(options) {\n    super();\n    this.userAgent = `Discord-OAuth2 (https://github.com/reboxer/discord-oauth2, ${require(\"../../../package.json\").version})`;\n    this.ratelimits = {};\n    this.requestTimeout = options.requestTimeout;\n    this.latencyThreshold = options.latencyThreshold;\n    this.latencyRef = {\n      latency: 500,\n      offset: options.ratelimiterOffset,\n      raw: [500, 500, 500, 500, 500, 500, 500, 500, 500, 500],\n      timeOffset: 0,\n      timeOffsets: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      lastTimeOffsetCheck: 0\n    };\n    this.globalBlock = false;\n    this.readyQueue = [];\n  }\n\n  globalUnblock() {\n    this.globalBlock = false;\n\n    while (this.readyQueue.length > 0) {\n      this.readyQueue.shift()();\n    }\n  } // We need this for the Add Guild Member endpoint\n\n\n  routefy(url) {\n    return url.replace(/\\/([a-z-]+)\\/(?:[0-9]{17,19})/g, function (match, p) {\n      return p === \"guilds\" ? match : `/${p}/:id`;\n    });\n  }\n  /**\r\n  * Make an API request\r\n  * @arg {String} method Uppercase HTTP method\r\n  * @arg {String} url URL of the endpoint\r\n  * @arg {Object} options\r\n  * @arg {Object} [options.auth]\r\n  * @arg {String} [options.auth.type] The type of Authorization to use in the header, wheather Basic, Bearer or Bot\r\n  * @arg {String} [options.auth.creds] The credentials used for the authentication (bot or user access token), if Basic, a base64 string with application's credentials must be passed\r\n  * @arg {String} options.contentType The content type to set in the headers of the request\r\n  * @arg {Object} [body] Request payload\r\n  * @returns {Promise<Object>} Resolves with the returned JSON data\r\n  */\n\n\n  request(method, url, body, options, _route, short) {\n    const route = _route || this.routefy(url, method);\n\n    const _stackHolder = {}; // Preserve async stack\n\n    Error.captureStackTrace(_stackHolder);\n    return new Promise((resolve, reject) => {\n      let attempts = 0;\n\n      const actualCall = cb => {\n        const headers = {\n          \"User-Agent\": this.userAgent,\n          \"Content-Type\": options.contentType\n        };\n        let data;\n\n        try {\n          if (options.auth) {\n            headers[\"Authorization\"] = `${options.auth.type} ${options.auth.creds}`;\n          }\n\n          if (headers[\"Content-Type\"] === \"application/json\") {\n            data = JSON.stringify(body);\n          } else {\n            data = body;\n          }\n        } catch (err) {\n          cb();\n          reject(err);\n          return;\n        }\n\n        const req = HTTPS.request({\n          method: method,\n          host: \"discordapp.com\",\n          path: \"/api/v7\" + url,\n          headers: headers\n        });\n        let reqError;\n        req.once(\"abort\", () => {\n          cb();\n          reqError = reqError || new Error(`Request aborted by client on ${method} ${url}`);\n          reqError.req = req;\n          reject(reqError);\n        }).once(\"aborted\", () => {\n          cb();\n          reqError = reqError || new Error(`Request aborted by server on ${method} ${url}`);\n          reqError.req = req;\n          reject(reqError);\n        }).once(\"error\", err => {\n          reqError = err;\n          req.abort();\n        });\n        let latency = Date.now();\n        req.once(\"response\", resp => {\n          latency = Date.now() - latency;\n          this.latencyRef.raw.push(latency);\n          this.latencyRef.latency = this.latencyRef.latency - ~~(this.latencyRef.raw.shift() / 10) + ~~(latency / 10);\n          const headerNow = Date.parse(resp.headers[\"date\"]);\n\n          if (this.latencyRef.lastTimeOffsetCheck < Date.now() - 5000) {\n            const timeOffset = ~~((this.latencyRef.lastTimeOffsetCheck = Date.now()) - headerNow);\n\n            if (this.latencyRef.timeOffset - this.latencyRef.latency >= this.latencyThreshold && timeOffset - this.latencyRef.latency >= this.latencyThreshold) {\n              this.emit(\"warn\", new Error(`Your clock is ${this.latencyRef.timeOffset}ms behind Discord's server clock. Please check your connection and system time.`));\n            }\n\n            this.latencyRef.timeOffset = ~~(this.latencyRef.timeOffset - this.latencyRef.timeOffsets.shift() / 10 + timeOffset / 10);\n            this.latencyRef.timeOffsets.push(timeOffset);\n          }\n\n          let response = \"\";\n          const _respStream = resp;\n\n          _respStream.on(\"data\", str => {\n            response += str;\n          }).once(\"end\", () => {\n            const now = Date.now();\n\n            if (resp.headers[\"x-ratelimit-limit\"]) {\n              this.ratelimits[route].limit = +resp.headers[\"x-ratelimit-limit\"];\n            }\n\n            if (method !== \"GET\" && (resp.headers[\"x-ratelimit-remaining\"] == undefined || resp.headers[\"x-ratelimit-limit\"] == undefined) && this.ratelimits[route].limit !== 1) {\n              this.emit(\"debug\", `Missing ratelimit headers for SequentialBucket(${this.ratelimits[route].remaining}/${this.ratelimits[route].limit}) with non-default limit\\n` + `${resp.statusCode} ${resp.headers[\"content-type\"]}: ${method} ${route} | ${resp.headers[\"cf-ray\"]}\\n` + \"content-type = \" + \"\\n\" + \"x-ratelimit-remaining = \" + resp.headers[\"x-ratelimit-remaining\"] + \"\\n\" + \"x-ratelimit-limit = \" + resp.headers[\"x-ratelimit-limit\"] + \"\\n\" + \"x-ratelimit-reset = \" + resp.headers[\"x-ratelimit-reset\"] + \"\\n\" + \"x-ratelimit-global = \" + resp.headers[\"x-ratelimit-global\"]);\n            }\n\n            this.ratelimits[route].remaining = resp.headers[\"x-ratelimit-remaining\"] === undefined ? 1 : +resp.headers[\"x-ratelimit-remaining\"] || 0;\n\n            if (resp.headers[\"retry-after\"]) {\n              if (resp.headers[\"x-ratelimit-global\"]) {\n                this.globalBlock = true;\n                setTimeout(() => this.globalUnblock(), +resp.headers[\"retry-after\"] || 1);\n              } else {\n                this.ratelimits[route].reset = (+resp.headers[\"retry-after\"] || 1) + now;\n              }\n            } else if (resp.headers[\"x-ratelimit-reset\"]) {\n              if (~route.lastIndexOf(\"/reactions/:id\") && +resp.headers[\"x-ratelimit-reset\"] * 1000 - headerNow === 1000) {\n                this.ratelimits[route].reset = Math.max(now + 250 - this.latencyRef.timeOffset, now);\n              } else {\n                this.ratelimits[route].reset = Math.max(+resp.headers[\"x-ratelimit-reset\"] * 1000 - this.latencyRef.timeOffset, now);\n              }\n            } else {\n              this.ratelimits[route].reset = now;\n            }\n\n            if (resp.statusCode !== 429) {\n              this.emit(\"debug\", `${body && body.content} ${now} ${route} ${resp.statusCode}: ${latency}ms (${this.latencyRef.latency}ms avg) | ${this.ratelimits[route].remaining}/${this.ratelimits[route].limit} left | Reset ${this.ratelimits[route].reset} (${this.ratelimits[route].reset - now}ms left)`);\n            }\n\n            if (resp.statusCode >= 300) {\n              if (resp.statusCode === 429) {\n                this.emit(\"debug\", `${resp.headers[\"x-ratelimit-global\"] ? \"Global\" : \"Unexpected\"} 429 (╯°□°）╯︵ ┻━┻: ${response}\\n${body && body.content} ${now} ${route} ${resp.statusCode}: ${latency}ms (${this.latencyRef.latency}ms avg) | ${this.ratelimits[route].remaining}/${this.ratelimits[route].limit} left | Reset ${this.ratelimits[route].reset} (${this.ratelimits[route].reset - now}ms left)`);\n\n                if (resp.headers[\"retry-after\"]) {\n                  setTimeout(() => {\n                    cb();\n                    this.request(method, url, body, options, route, true).then(resolve).catch(reject);\n                  }, +resp.headers[\"retry-after\"]);\n                  return;\n                } else {\n                  cb();\n                  this.request(method, url, body, options, route, true).then(resolve).catch(reject);\n                  return;\n                }\n              } else if (resp.statusCode === 502 && ++attempts < 4) {\n                this.emit(\"debug\", \"A wild 502 appeared! Thanks CloudFlare!\");\n                setTimeout(() => {\n                  this.request(method, url, body, options, route, true).then(resolve).catch(reject);\n                }, Math.floor(Math.random() * 1900 + 100));\n                return cb();\n              }\n\n              cb();\n\n              if (response.length > 0) {\n                if (resp.headers[\"content-type\"] === \"application/json\") {\n                  try {\n                    response = JSON.parse(response);\n                  } catch (err) {\n                    reject(err);\n                    return;\n                  }\n                }\n              }\n\n              let {\n                stack\n              } = _stackHolder;\n\n              if (stack.startsWith(\"Error\\n\")) {\n                stack = stack.substring(6);\n              }\n\n              let err;\n\n              if (response.code) {\n                err = new DiscordRESTError(req, resp, response, stack);\n              } else {\n                err = new DiscordHTTPError(req, resp, response, stack);\n              }\n\n              reject(err);\n              return;\n            }\n\n            if (response.length > 0) {\n              if (resp.headers[\"content-type\"] === \"application/json\") {\n                try {\n                  response = JSON.parse(response);\n                } catch (err) {\n                  cb();\n                  reject(err);\n                  return;\n                }\n              }\n            }\n\n            cb();\n            resolve(response);\n          });\n        });\n        req.setTimeout(this.requestTimeout, function () {\n          reqError = new Error(`Request timed out (>${this.requestTimeout}ms) on ${method} ${url}`);\n          req.abort();\n        });\n        req.end(data);\n      };\n\n      if (this.globalBlock && options.auth) {\n        this.readyQueue.push(() => {\n          if (!this.ratelimits[route]) {\n            this.ratelimits[route] = new SequentialBucket(1, this.latencyRef);\n          }\n\n          this.ratelimits[route].queue(actualCall, short);\n        });\n      } else {\n        if (!this.ratelimits[route]) {\n          this.ratelimits[route] = new SequentialBucket(1, this.latencyRef);\n        }\n\n        this.ratelimits[route].queue(actualCall, short);\n      }\n    });\n  }\n\n}\n\nmodule.exports = RequestHandler;","map":{"version":3,"sources":["C:/Users/Romas/astro/node_modules/discord-oauth2/lib/eris/rest/RequestHandler.js"],"names":["DiscordHTTPError","require","DiscordRESTError","HTTPS","SequentialBucket","EventEmitter","RequestHandler","constructor","options","userAgent","version","ratelimits","requestTimeout","latencyThreshold","latencyRef","latency","offset","ratelimiterOffset","raw","timeOffset","timeOffsets","lastTimeOffsetCheck","globalBlock","readyQueue","globalUnblock","length","shift","routefy","url","replace","match","p","request","method","body","_route","short","route","_stackHolder","Error","captureStackTrace","Promise","resolve","reject","attempts","actualCall","cb","headers","contentType","data","auth","type","creds","JSON","stringify","err","req","host","path","reqError","once","abort","Date","now","resp","push","headerNow","parse","emit","response","_respStream","on","str","limit","undefined","remaining","statusCode","setTimeout","reset","lastIndexOf","Math","max","content","then","catch","floor","random","stack","startsWith","substring","code","end","queue","module","exports"],"mappings":"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","sourcesContent":["/*\r\n    The MIT License (MIT)\r\n\r\n    Copyright (c) 2016-2018 abalabahaha\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy of\r\n    this software and associated documentation files (the \"Software\"), to deal in\r\n    the Software without restriction, including without limitation the rights to\r\n    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\n    the Software, and to permit persons to whom the Software is furnished to do so,\r\n    subject to the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included in all\r\n    copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\n    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\n    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\n    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\n// Modifications to work with discord's OAuth2 made by legendarylol#8215 (364571773947346955) on discord\r\n// On github: https://github.com/reboxer\r\n// Repository: https://github.com/reboxer/discord-oauth2\r\n// Disclaimer: I did not create the original \"RequestHandler\" for the Eris Discord library, i only did the modifications to work with OAuth2\r\n//             All credits go to abalabahaha (https://github.com/abalabahaha) and contributors to the Eris Discord library (https://github.com/abalabahaha/eris)\r\n\r\n\"use strict\";\r\n\r\nconst DiscordHTTPError = require(\"../errors/DiscordHTTPError\");\r\nconst DiscordRESTError = require(\"../errors/DiscordRESTError\");\r\nconst HTTPS = require(\"https\");\r\nconst SequentialBucket = require(\"../util/SequentialBucket\");\r\nconst EventEmitter = require(\"events\");\r\n\r\n/**\r\n* Handles API requests\r\n*/\r\nclass RequestHandler extends EventEmitter {\r\n    constructor(options) {\r\n        super();\r\n        this.userAgent = `Discord-OAuth2 (https://github.com/reboxer/discord-oauth2, ${require(\"../../../package.json\").version})`;\r\n        this.ratelimits = {};\r\n        this.requestTimeout = options.requestTimeout;\r\n        this.latencyThreshold = options.latencyThreshold;\r\n        this.latencyRef = {\r\n            latency: 500,\r\n            offset: options.ratelimiterOffset,\r\n            raw: [500, 500, 500, 500, 500, 500, 500, 500, 500, 500],\r\n            timeOffset: 0,\r\n            timeOffsets: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            lastTimeOffsetCheck: 0\r\n        };\r\n        this.globalBlock = false;\r\n        this.readyQueue = [];\r\n    }\r\n\r\n    globalUnblock() {\r\n        this.globalBlock = false;\r\n        while(this.readyQueue.length > 0) {\r\n            this.readyQueue.shift()();\r\n        }\r\n    }\r\n\r\n    // We need this for the Add Guild Member endpoint\r\n    routefy(url) {\r\n        return url.replace(/\\/([a-z-]+)\\/(?:[0-9]{17,19})/g, function(match, p) {\r\n            return p === \"guilds\" ? match : `/${p}/:id`;\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Make an API request\r\n    * @arg {String} method Uppercase HTTP method\r\n    * @arg {String} url URL of the endpoint\r\n    * @arg {Object} options\r\n    * @arg {Object} [options.auth]\r\n    * @arg {String} [options.auth.type] The type of Authorization to use in the header, wheather Basic, Bearer or Bot\r\n    * @arg {String} [options.auth.creds] The credentials used for the authentication (bot or user access token), if Basic, a base64 string with application's credentials must be passed\r\n    * @arg {String} options.contentType The content type to set in the headers of the request\r\n    * @arg {Object} [body] Request payload\r\n    * @returns {Promise<Object>} Resolves with the returned JSON data\r\n    */\r\n    request(method, url, body, options, _route, short) {\r\n        const route = _route || this.routefy(url, method);\r\n\r\n        const _stackHolder = {}; // Preserve async stack\r\n        Error.captureStackTrace(_stackHolder);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            let attempts = 0;\r\n\r\n            const actualCall = (cb) => {\r\n                const headers = {\r\n                    \"User-Agent\": this.userAgent,\r\n                    \"Content-Type\": options.contentType\r\n                };\r\n                let data;\r\n                try {\r\n                    if (options.auth) {\r\n                        headers[\"Authorization\"] = `${options.auth.type} ${options.auth.creds}`;\r\n                    }\r\n                    if (headers[\"Content-Type\"] === \"application/json\") {\r\n                        data = JSON.stringify(body);\r\n                    } else {\r\n                        data = body;\r\n                    }\r\n                } catch(err) {\r\n                    cb();\r\n                    reject(err);\r\n                    return;\r\n                }\r\n\r\n                const req = HTTPS.request({\r\n                    method: method,\r\n                    host: \"discordapp.com\",\r\n                    path: \"/api/v7\" + url,\r\n                    headers: headers\r\n                });\r\n\r\n                let reqError;\r\n\r\n                req.once(\"abort\", () => {\r\n                    cb();\r\n                    reqError = reqError || new Error(`Request aborted by client on ${method} ${url}`);\r\n                    reqError.req = req;\r\n                    reject(reqError);\r\n                }).once(\"aborted\", () => {\r\n                    cb();\r\n                    reqError = reqError || new Error(`Request aborted by server on ${method} ${url}`);\r\n                    reqError.req = req;\r\n                    reject(reqError);\r\n                }).once(\"error\", (err) => {\r\n                    reqError = err;\r\n                    req.abort();\r\n                });\r\n\r\n                let latency = Date.now();\r\n\r\n                req.once(\"response\", (resp) => {\r\n                    latency = Date.now() - latency;\r\n                    this.latencyRef.raw.push(latency);\r\n                    this.latencyRef.latency = this.latencyRef.latency - ~~(this.latencyRef.raw.shift() / 10) + ~~(latency / 10);\r\n\r\n                    const headerNow = Date.parse(resp.headers[\"date\"]);\r\n                    if(this.latencyRef.lastTimeOffsetCheck < Date.now() - 5000) {\r\n                        const timeOffset = ~~((this.latencyRef.lastTimeOffsetCheck = Date.now()) - headerNow);\r\n                        if(this.latencyRef.timeOffset - this.latencyRef.latency >= this.latencyThreshold && timeOffset - this.latencyRef.latency >= this.latencyThreshold) {\r\n                            this.emit(\"warn\", new Error(`Your clock is ${this.latencyRef.timeOffset}ms behind Discord's server clock. Please check your connection and system time.`));\r\n                        }\r\n                        this.latencyRef.timeOffset = ~~(this.latencyRef.timeOffset - this.latencyRef.timeOffsets.shift() / 10 + timeOffset / 10);\r\n                        this.latencyRef.timeOffsets.push(timeOffset);\r\n                    }\r\n\r\n                    let response = \"\";\r\n\r\n                    const _respStream = resp;\r\n\r\n                    _respStream.on(\"data\", (str) => {\r\n                        response += str;\r\n                    }).once(\"end\", () => {\r\n                        const now = Date.now();\r\n\r\n                        if(resp.headers[\"x-ratelimit-limit\"]) {\r\n                            this.ratelimits[route].limit = +resp.headers[\"x-ratelimit-limit\"];\r\n                        }\r\n\r\n                        if(method !== \"GET\" && (resp.headers[\"x-ratelimit-remaining\"] == undefined || resp.headers[\"x-ratelimit-limit\"] == undefined) && this.ratelimits[route].limit !== 1) {\r\n                            this.emit(\"debug\", `Missing ratelimit headers for SequentialBucket(${this.ratelimits[route].remaining}/${this.ratelimits[route].limit}) with non-default limit\\n`\r\n                                + `${resp.statusCode} ${resp.headers[\"content-type\"]}: ${method} ${route} | ${resp.headers[\"cf-ray\"]}\\n`\r\n                                + \"content-type = \" + \"\\n\"\r\n                                + \"x-ratelimit-remaining = \" + resp.headers[\"x-ratelimit-remaining\"] + \"\\n\"\r\n                                + \"x-ratelimit-limit = \" + resp.headers[\"x-ratelimit-limit\"] + \"\\n\"\r\n                                + \"x-ratelimit-reset = \" + resp.headers[\"x-ratelimit-reset\"] + \"\\n\"\r\n                                + \"x-ratelimit-global = \" + resp.headers[\"x-ratelimit-global\"]);\r\n                        }\r\n\r\n                        this.ratelimits[route].remaining = resp.headers[\"x-ratelimit-remaining\"] === undefined ? 1 : +resp.headers[\"x-ratelimit-remaining\"] || 0;\r\n\r\n                        if(resp.headers[\"retry-after\"]) {\r\n                            if(resp.headers[\"x-ratelimit-global\"]) {\r\n                                this.globalBlock = true;\r\n                                setTimeout(() => this.globalUnblock(), +resp.headers[\"retry-after\"] || 1);\r\n                            } else {\r\n                                this.ratelimits[route].reset = (+resp.headers[\"retry-after\"] || 1) + now;\r\n                            }\r\n                        } else if(resp.headers[\"x-ratelimit-reset\"]) {\r\n                            if((~route.lastIndexOf(\"/reactions/:id\")) && (+resp.headers[\"x-ratelimit-reset\"] * 1000 - headerNow) === 1000) {\r\n                                this.ratelimits[route].reset = Math.max(now + 250 - this.latencyRef.timeOffset, now);\r\n                            } else {\r\n                                this.ratelimits[route].reset = Math.max(+resp.headers[\"x-ratelimit-reset\"] * 1000 - this.latencyRef.timeOffset, now);\r\n                            }\r\n                        } else {\r\n                            this.ratelimits[route].reset = now;\r\n                        }\r\n\r\n                        if(resp.statusCode !== 429) {\r\n                            this.emit(\"debug\", `${body && body.content} ${now} ${route} ${resp.statusCode}: ${latency}ms (${this.latencyRef.latency}ms avg) | ${this.ratelimits[route].remaining}/${this.ratelimits[route].limit} left | Reset ${this.ratelimits[route].reset} (${this.ratelimits[route].reset - now}ms left)`);\r\n                        }\r\n\r\n                        if(resp.statusCode >= 300) {\r\n                            if(resp.statusCode === 429) {\r\n                                this.emit(\"debug\", `${resp.headers[\"x-ratelimit-global\"] ? \"Global\" : \"Unexpected\"} 429 (╯°□°）╯︵ ┻━┻: ${response}\\n${body && body.content} ${now} ${route} ${resp.statusCode}: ${latency}ms (${this.latencyRef.latency}ms avg) | ${this.ratelimits[route].remaining}/${this.ratelimits[route].limit} left | Reset ${this.ratelimits[route].reset} (${this.ratelimits[route].reset - now}ms left)`);\r\n                                if(resp.headers[\"retry-after\"]) {\r\n                                    setTimeout(() => {\r\n                                        cb();\r\n                                        this.request(method, url, body, options, route, true).then(resolve).catch(reject);\r\n                                    }, +resp.headers[\"retry-after\"]);\r\n                                    return;\r\n                                } else {\r\n                                    cb();\r\n                                    this.request(method, url, body, options, route, true).then(resolve).catch(reject);\r\n                                    return;\r\n                                }\r\n                            } else if(resp.statusCode === 502 && ++attempts < 4) {\r\n                                this.emit(\"debug\", \"A wild 502 appeared! Thanks CloudFlare!\");\r\n                                setTimeout(() => {\r\n                                    this.request(method, url, body, options, route, true).then(resolve).catch(reject);\r\n                                }, Math.floor(Math.random() * 1900 + 100));\r\n                                return cb();\r\n                            }\r\n                            cb();\r\n\r\n                            if(response.length > 0) {\r\n                                if(resp.headers[\"content-type\"] === \"application/json\") {\r\n                                    try {\r\n                                        response = JSON.parse(response);\r\n                                    } catch(err) {\r\n                                        reject(err);\r\n                                        return;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            let { stack } = _stackHolder;\r\n                            if(stack.startsWith(\"Error\\n\")) {\r\n                                stack = stack.substring(6);\r\n                            }\r\n                            let err;\r\n                            if(response.code) {\r\n                                err = new DiscordRESTError(req, resp, response, stack);\r\n                            } else {\r\n                                err = new DiscordHTTPError(req, resp, response, stack);\r\n                            }\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n\r\n                        if(response.length > 0) {\r\n                            if(resp.headers[\"content-type\"] === \"application/json\") {\r\n                                try {\r\n                                    response = JSON.parse(response);\r\n                                } catch(err) {\r\n                                    cb();\r\n                                    reject(err);\r\n                                    return;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        cb();\r\n                        resolve(response);\r\n                    });\r\n                });\r\n\r\n                req.setTimeout(this.requestTimeout, function() {\r\n                    reqError = new Error(`Request timed out (>${this.requestTimeout}ms) on ${method} ${url}`);\r\n                    req.abort();\r\n                });\r\n\r\n                req.end(data);\r\n            };\r\n\r\n            if(this.globalBlock && (options.auth)) {\r\n                this.readyQueue.push(() => {\r\n                    if(! this.ratelimits[route]) {\r\n                        this.ratelimits[route] = new SequentialBucket(1, this.latencyRef);\r\n                    }\r\n                    this.ratelimits[route].queue(actualCall, short);\r\n                });\r\n            } else {\r\n                if(! this.ratelimits[route]) {\r\n                    this.ratelimits[route] = new SequentialBucket(1, this.latencyRef);\r\n                }\r\n                this.ratelimits[route].queue(actualCall, short);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = RequestHandler;\r\n"]},"metadata":{},"sourceType":"script"}