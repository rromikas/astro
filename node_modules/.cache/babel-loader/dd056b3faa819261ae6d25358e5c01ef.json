{"ast":null,"code":"\"use strict\";\n/* eslint-disable */\n\nclass DiscordHTTPError extends Error {\n  constructor(req, res, response, stack) {\n    super();\n    Object.defineProperty(this, \"req\", {\n      enumerable: false,\n      value: req,\n      writable: false\n    });\n    Object.defineProperty(this, \"res\", {\n      enumerable: false,\n      value: res,\n      writable: false\n    });\n    Object.defineProperty(this, \"response\", {\n      enumerable: false,\n      value: response,\n      writable: false\n    });\n    Object.defineProperty(this, \"code\", {\n      value: res.statusCode,\n      writable: false\n    });\n    let message = `${this.name}: ${res.statusCode} ${res.statusMessage} on ${req.method} ${req.path}`;\n    const errors = this.flattenErrors(response);\n\n    if (errors.length > 0) {\n      message += \"\\n  \" + errors.join(\"\\n  \");\n    }\n\n    Object.defineProperty(this, \"message\", {\n      value: message,\n      writable: false\n    });\n\n    if (stack) {\n      Object.defineProperty(this, \"stack\", {\n        value: this.message + \"\\n\" + stack,\n        writable: false\n      });\n    } else {\n      Error.captureStackTrace(this, DiscordHTTPError);\n    }\n  }\n\n  get name() {\n    return this.constructor.name;\n  }\n\n  flattenErrors(errors, keyPrefix = \"\") {\n    let messages = [];\n\n    for (const fieldName in errors) {\n      if (!errors.hasOwnProperty(fieldName) || fieldName === \"message\" || fieldName === \"code\") {\n        continue;\n      }\n\n      if (Array.isArray(errors[fieldName])) {\n        messages = messages.concat(errors[fieldName].map(str => `${keyPrefix + fieldName}: ${str}`));\n      }\n    }\n\n    return messages;\n  }\n\n}\n\nmodule.exports = DiscordHTTPError;","map":{"version":3,"sources":["C:/Users/Romas/astro/node_modules/discord-oauth2/lib/eris/errors/DiscordHTTPError.js"],"names":["DiscordHTTPError","Error","constructor","req","res","response","stack","Object","defineProperty","enumerable","value","writable","statusCode","message","name","statusMessage","method","path","errors","flattenErrors","length","join","captureStackTrace","keyPrefix","messages","fieldName","hasOwnProperty","Array","isArray","concat","map","str","module","exports"],"mappings":"AAAA;AAEA;;AACA,MAAMA,gBAAN,SAA+BC,KAA/B,CAAqC;AACjCC,EAAAA,WAAW,CAACC,GAAD,EAAMC,GAAN,EAAWC,QAAX,EAAqBC,KAArB,EAA4B;AACnC;AAEAC,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,KAA5B,EAAmC;AAC/BC,MAAAA,UAAU,EAAE,KADmB;AAE/BC,MAAAA,KAAK,EAAEP,GAFwB;AAG/BQ,MAAAA,QAAQ,EAAE;AAHqB,KAAnC;AAKAJ,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,KAA5B,EAAmC;AAC/BC,MAAAA,UAAU,EAAE,KADmB;AAE/BC,MAAAA,KAAK,EAAEN,GAFwB;AAG/BO,MAAAA,QAAQ,EAAE;AAHqB,KAAnC;AAKAJ,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,UAA5B,EAAwC;AACpCC,MAAAA,UAAU,EAAE,KADwB;AAEpCC,MAAAA,KAAK,EAAEL,QAF6B;AAGpCM,MAAAA,QAAQ,EAAE;AAH0B,KAAxC;AAMAJ,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,MAA5B,EAAoC;AAChCE,MAAAA,KAAK,EAAEN,GAAG,CAACQ,UADqB;AAEhCD,MAAAA,QAAQ,EAAE;AAFsB,KAApC;AAIA,QAAIE,OAAO,GAAI,GAAE,KAAKC,IAAK,KAAIV,GAAG,CAACQ,UAAW,IAAGR,GAAG,CAACW,aAAc,OAAMZ,GAAG,CAACa,MAAO,IAAGb,GAAG,CAACc,IAAK,EAAhG;AACA,UAAMC,MAAM,GAAG,KAAKC,aAAL,CAAmBd,QAAnB,CAAf;;AACA,QAAGa,MAAM,CAACE,MAAP,GAAgB,CAAnB,EAAsB;AAClBP,MAAAA,OAAO,IAAI,SAASK,MAAM,CAACG,IAAP,CAAY,MAAZ,CAApB;AACH;;AACDd,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,SAA5B,EAAuC;AACnCE,MAAAA,KAAK,EAAEG,OAD4B;AAEnCF,MAAAA,QAAQ,EAAE;AAFyB,KAAvC;;AAKA,QAAGL,KAAH,EAAU;AACNC,MAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,OAA5B,EAAqC;AACjCE,QAAAA,KAAK,EAAE,KAAKG,OAAL,GAAe,IAAf,GAAsBP,KADI;AAEjCK,QAAAA,QAAQ,EAAE;AAFuB,OAArC;AAIH,KALD,MAKO;AACHV,MAAAA,KAAK,CAACqB,iBAAN,CAAwB,IAAxB,EAA8BtB,gBAA9B;AACH;AACJ;;AAED,MAAIc,IAAJ,GAAW;AACP,WAAO,KAAKZ,WAAL,CAAiBY,IAAxB;AACH;;AAEDK,EAAAA,aAAa,CAACD,MAAD,EAASK,SAAS,GAAG,EAArB,EAAyB;AAClC,QAAIC,QAAQ,GAAG,EAAf;;AACA,SAAI,MAAMC,SAAV,IAAuBP,MAAvB,EAA+B;AAC3B,UAAG,CAACA,MAAM,CAACQ,cAAP,CAAsBD,SAAtB,CAAD,IAAqCA,SAAS,KAAK,SAAnD,IAAgEA,SAAS,KAAK,MAAjF,EAAyF;AACrF;AACH;;AACD,UAAGE,KAAK,CAACC,OAAN,CAAcV,MAAM,CAACO,SAAD,CAApB,CAAH,EAAqC;AACjCD,QAAAA,QAAQ,GAAGA,QAAQ,CAACK,MAAT,CAAgBX,MAAM,CAACO,SAAD,CAAN,CAAkBK,GAAlB,CAAuBC,GAAD,IAAU,GAAER,SAAS,GAAGE,SAAU,KAAIM,GAAI,EAAhE,CAAhB,CAAX;AACH;AACJ;;AACD,WAAOP,QAAP;AACH;;AA3DgC;;AA8DrCQ,MAAM,CAACC,OAAP,GAAiBjC,gBAAjB","sourcesContent":["\"use strict\";\r\n\r\n/* eslint-disable */\r\nclass DiscordHTTPError extends Error {\r\n    constructor(req, res, response, stack) {\r\n        super();\r\n\r\n        Object.defineProperty(this, \"req\", {\r\n            enumerable: false,\r\n            value: req,\r\n            writable: false\r\n        });\r\n        Object.defineProperty(this, \"res\", {\r\n            enumerable: false,\r\n            value: res,\r\n            writable: false\r\n        });\r\n        Object.defineProperty(this, \"response\", {\r\n            enumerable: false,\r\n            value: response,\r\n            writable: false\r\n        });\r\n\r\n        Object.defineProperty(this, \"code\", {\r\n            value: res.statusCode,\r\n            writable: false\r\n        });\r\n        let message = `${this.name}: ${res.statusCode} ${res.statusMessage} on ${req.method} ${req.path}`;\r\n        const errors = this.flattenErrors(response);\r\n        if(errors.length > 0) {\r\n            message += \"\\n  \" + errors.join(\"\\n  \");\r\n        }\r\n        Object.defineProperty(this, \"message\", {\r\n            value: message,\r\n            writable: false\r\n        });\r\n\r\n        if(stack) {\r\n            Object.defineProperty(this, \"stack\", {\r\n                value: this.message + \"\\n\" + stack,\r\n                writable: false\r\n            });\r\n        } else {\r\n            Error.captureStackTrace(this, DiscordHTTPError);\r\n        }\r\n    }\r\n\r\n    get name() {\r\n        return this.constructor.name;\r\n    }\r\n\r\n    flattenErrors(errors, keyPrefix = \"\") {\r\n        let messages = [];\r\n        for(const fieldName in errors) {\r\n            if(!errors.hasOwnProperty(fieldName) || fieldName === \"message\" || fieldName === \"code\") {\r\n                continue;\r\n            }\r\n            if(Array.isArray(errors[fieldName])) {\r\n                messages = messages.concat(errors[fieldName].map((str) => `${keyPrefix + fieldName}: ${str}`));\r\n            }\r\n        }\r\n        return messages;\r\n    }\r\n}\r\n\r\nmodule.exports = DiscordHTTPError;\r\n"]},"metadata":{},"sourceType":"script"}